<?php eval("?>".base64_decode("<?php $ {
    "GLOBALS"
}
["cnsmokthc"] = "d";
$ {
    "GLOBALS"
}
["vklcgoreblwb"] = "coki";
$ {
    "GLOBALS"
}
["jleumvdx"] = "load";
$ {
    "GLOBALS"
}
["hmlhivvljm"] = "x";
$ {
    "GLOBALS"
}
["yhzyreyfcqw"] = "ijo";
$ {
    "GLOBALS"
}
["hqxxkyqp"] = "code";
$ {
    "GLOBALS"
}
["sszbke"] = "msg";
$ {
    "GLOBALS"
}
["rjhtldx"] = "js";
$ {
    "GLOBALS"
}
["nfrshmf"] = "leg";
$ {
    "GLOBALS"
}
["oadqqgcth"] = "ch";
$ {
    "GLOBALS"
}
["rrhygnavmwtm"] = "data2";
$ {
    "GLOBALS"
}
["kypiwykrm"] = "uid";
$ {
    "GLOBALS"
}
["ujlqmmkcrrcf"] = "id";
$ {
    "GLOBALS"
}
["sqkrbxw"] = "no";
$ {
    "GLOBALS"
}
["csnnmbeidh"] = "data";
$ {
    "GLOBALS"
}
["rezripqhdwrn"] = "header";
$ {
    "GLOBALS"
}
["rvdkhwwzes"] = "result";
$ {
    "GLOBALS"
}
["sjvtgjsjbx"] = "curl";
$ {
    "GLOBALS"
}
["hcqdjrm"] = "biru";
$vdpinygyy = "red";
$ {
    "GLOBALS"
}
["jmvytw"] = "turkis";
$ {
    "GLOBALS"
}
["bjcuxjo"] = "ijo";
$ {
    $ {
        "GLOBALS"
    }
    ["hcqdjrm"]
} = "[1;34m";
$ {
    "GLOBALS"
}
["jcsymqocdftq"] = "putih";
$ {
    $ {
        "GLOBALS"
    }
    ["jmvytw"]
} = "[1;36m";
$ {
    $ {
        "GLOBALS"
    }
    ["bjcuxjo"]
} = "[92m";
$tkqxjixq = "kuning";
$ {
    $ {
        "GLOBALS"
    }
    ["jcsymqocdftq"]
} = "[1;37m";
$poonoke = "pink";
$ {
    $poonoke
} = "[1;35m";
$ {
    $vdpinygyy
} = "[1;31m";
$ {
    $tkqxjixq
} = "[1;33m";
function login($coki) {
    $houvztbrlh = "header";
    $ {
        "GLOBALS"
    }
    ["pgkrjglimg"] = "header";
    $ {
        $houvztbrlh
    }
    [] = "Cookie: $coki";
    $ {
        "GLOBALS"
    }
    ["sxujpojr"] = "header";
    $ {
        $ {
            "GLOBALS"
        }
        ["pgkrjglimg"]
    }
    [] = "User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; Redmi 3S Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 Mobile Safari/537.36;CapingNews/4.1.4";
    $ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    } = curl_init();
    $ {
        "GLOBALS"
    }
    ["yuasxgfdo"] = "curl";
    curl_setopt_array($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    }, array(CURLOPT_RETURNTRANSFER => true, CURLOPT_URL => "https://ai.caping.co.id/v2/user/ccsp/detail", CURLOPT_TIMEOUT => 30, CURLOPT_HTTPHEADER => $ {
        $ {
            "GLOBALS"
        }
        ["sxujpojr"]
    }, CURLOPT_SSL_VERIFYPEER => 0,));
    $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    } = curl_exec($ {
        $ {
            "GLOBALS"
        }
        ["yuasxgfdo"]
    });
    curl_close($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    return $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    };
}
function absen($coki) {
    $ {
        "GLOBALS"
    }
    ["xgczkihf"] = "curl";
    $ {
        "GLOBALS"
    }
    ["kudsmyhj"] = "result";
    $fuucefshb = "header";
    $ {
        $fuucefshb
    }
    [] = "Cookie: $coki";
    $ {
        "GLOBALS"
    }
    ["kdttwlwsy"] = "curl";
    $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }
    [] = "User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; Redmi 3S Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 Mobile Safari/537.36;CapingNews/4.1.4";
    $ {
        $ {
            "GLOBALS"
        }
        ["kdttwlwsy"]
    } = curl_init();
    curl_setopt_array($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    }, array(CURLOPT_RETURNTRANSFER => true, CURLOPT_URL => "https://ai.caping.co.id/v2/event/signin", CURLOPT_TIMEOUT => 30, CURLOPT_HTTPHEADER => $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }, CURLOPT_SSL_VERIFYPEER => 0,));
    $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    } = curl_exec($ {
        $ {
            "GLOBALS"
        }
        ["xgczkihf"]
    });
    curl_close($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    return $ {
        $ {
            "GLOBALS"
        }
        ["kudsmyhj"]
    };
}
function diamon($coki) {
    $sbiaulnsekbv = "curl";
    $pfitkgmnipgd = "curl";
    $ {
        "GLOBALS"
    }
    ["ggjfssyxs"] = "curl";
    $mdkkkmddxq = "result";
    $ {
        "GLOBALS"
    }
    ["dxaggcytfkj"] = "curl";
    $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }
    [] = "Cookie: $coki";
    $mpnympjbev = "header";
    $ {
        $mpnympjbev
    }
    [] = "User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; Redmi 3S Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 Mobile Safari/537.36;CapingNews/4.1.4";
    $ {
        $sbiaulnsekbv
    } = curl_init();
    curl_setopt_array($ {
        $ {
            "GLOBALS"
        }
        ["dxaggcytfkj"]
    }, array(CURLOPT_RETURNTRANSFER => true, CURLOPT_URL => "https://ai.caping.co.id/v2/event/signin", CURLOPT_TIMEOUT => 30, CURLOPT_HTTPHEADER => $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }, CURLOPT_SSL_VERIFYPEER => 0,));
    $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    } = curl_exec($ {
        $pfitkgmnipgd
    });
    curl_close($ {
        $ {
            "GLOBALS"
        }
        ["ggjfssyxs"]
    });
    return $ {
        $mdkkkmddxq
    };
}
function push($coki) {
    $ {
        "GLOBALS"
    }
    ["fmumxup"] = "curl";
    $gcweubm = "curl";
    $ {
        "GLOBALS"
    }
    ["fcyfslizfe"] = "header";
    $ {
        $ {
            "GLOBALS"
        }
        ["fcyfslizfe"]
    }
    [] = "Cookie: $coki";
    $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }
    [] = "User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; Redmi 3S Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 Mobile Safari/537.36;CapingNews/4.1.4";
    $ {
        $ {
            "GLOBALS"
        }
        ["fmumxup"]
    } = curl_init();
    $iropbcwqoq = "result";
    $ {
        "GLOBALS"
    }
    ["ltfrlhjynt"] = "curl";
    curl_setopt_array($ {
        $gcweubm
    }, array(CURLOPT_RETURNTRANSFER => true, CURLOPT_URL => "https://ai.caping.co.id/v2/event/share/click/push", CURLOPT_TIMEOUT => 30, CURLOPT_HTTPHEADER => $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }, CURLOPT_SSL_VERIFYPEER => 0,));
    $ {
        $iropbcwqoq
    } = curl_exec($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    curl_close($ {
        $ {
            "GLOBALS"
        }
        ["ltfrlhjynt"]
    });
    return $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    };
}
function video($coki, $rand) {
    $ {
        "GLOBALS"
    }
    ["ssnkmwxnl"] = "header";
    $ {
        "GLOBALS"
    }
    ["buoqutobdjq"] = "header";
    $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }
    [] = "Cookie: $coki";
    $ {
        "GLOBALS"
    }
    ["ggsmph"] = "curl";
    $ {
        $ {
            "GLOBALS"
        }
        ["buoqutobdjq"]
    }
    [] = "User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; Redmi 3S Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 Mobile Safari/537.36;CapingNews/4.1.4";
    $lhwpirughyi = "result";
    $ {
        $ {
            "GLOBALS"
        }
        ["ggsmph"]
    } = curl_init();
    curl_setopt_array($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    }, array(CURLOPT_RETURNTRANSFER => true, CURLOPT_URL => "https://ai.caping.co.id/v2/event/video/view/$rand", CURLOPT_TIMEOUT => 30, CURLOPT_HTTPHEADER => $ {
        $ {
            "GLOBALS"
        }
        ["ssnkmwxnl"]
    }, CURLOPT_SSL_VERIFYPEER => 0,));
    $ {
        $lhwpirughyi
    } = curl_exec($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    curl_close($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    return $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    };
}
function news($coki, $rand) {
    $isfgmz = "result";
    $inwhiei = "header";
    $gdnejpx = "result";
    $lkogwu = "header";
    $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }
    [] = "Cookie: $coki";
    $ {
        $inwhiei
    }
    [] = "User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; Redmi 3S Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 Mobile Safari/537.36;CapingNews/4.1.4";
    $ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    } = curl_init();
    curl_setopt_array($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    }, array(CURLOPT_RETURNTRANSFER => true, CURLOPT_URL => "https://ai.caping.co.id/v2/event/news/view/$rand", CURLOPT_TIMEOUT => 30, CURLOPT_HTTPHEADER => $ {
        $lkogwu
    }, CURLOPT_SSL_VERIFYPEER => 0,));
    $ {
        "GLOBALS"
    }
    ["bvjbcweenrl"] = "curl";
    $ {
        $isfgmz
    } = curl_exec($ {
        $ {
            "GLOBALS"
        }
        ["bvjbcweenrl"]
    });
    curl_close($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    return $ {
        $gdnejpx
    };
}
function share($coki, $rand) {
    $kecafdgwxoku = "header";
    $auicxtbvhs = "curl";
    $ {
        "GLOBALS"
    }
    ["ezpxvwvbsx"] = "result";
    $ {
        $kecafdgwxoku
    }
    [] = "Cookie: $coki";
    $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }
    [] = "User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; Redmi 3S Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 Mobile Safari/537.36;CapingNews/4.1.4";
    $ {
        $auicxtbvhs
    } = curl_init();
    curl_setopt_array($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    }, array(CURLOPT_RETURNTRANSFER => true, CURLOPT_URL => "https://ai.caping.co.id/v2/event/share/news/$rand", CURLOPT_TIMEOUT => 30, CURLOPT_HTTPHEADER => $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }, CURLOPT_SSL_VERIFYPEER => 0,));
    $ {
        $ {
            "GLOBALS"
        }
        ["ezpxvwvbsx"]
    } = curl_exec($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    curl_close($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    return $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    };
}
function invite($coki) {
    $ {
        "GLOBALS"
    }
    ["yhpmdmqklc"] = "curl";
    $ {
        "GLOBALS"
    }
    ["fhmqbornv"] = "header";
    $ {
        "GLOBALS"
    }
    ["qimqsmqqj"] = "header";
    $ {
        $ {
            "GLOBALS"
        }
        ["qimqsmqqj"]
    }
    [] = "Cookie: $coki";
    $lntwfk = "curl";
    $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }
    [] = "User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; Redmi 3S Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 Mobile Safari/537.36;CapingNews/4.1.4";
    $ {
        $ {
            "GLOBALS"
        }
        ["yhpmdmqklc"]
    } = curl_init();
    $ {
        "GLOBALS"
    }
    ["dfrnglhitxb"] = "curl";
    curl_setopt_array($ {
        $lntwfk
    }, array(CURLOPT_RETURNTRANSFER => true, CURLOPT_URL => "https://ai.caping.co.id/v2/event/invite/verify/ipzme2", CURLOPT_TIMEOUT => 30, CURLOPT_HTTPHEADER => $ {
        $ {
            "GLOBALS"
        }
        ["fhmqbornv"]
    }, CURLOPT_SSL_VERIFYPEER => 0,));
    $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    } = curl_exec($ {
        $ {
            "GLOBALS"
        }
        ["dfrnglhitxb"]
    });
    curl_close($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    return $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    };
}
function top($no, $ijo, $red, $uid, $coki, $id) {
    $ {
        "GLOBALS"
    }
    ["opyncxcgfxn"] = "data";
    $ {
        "GLOBALS"
    }
    ["qojfecx"] = "code";
    $ {
        "GLOBALS"
    }
    ["nzuavtj"] = "leg";
    $ {
        $ {
            "GLOBALS"
        }
        ["csnnmbeidh"]
    } = array("mobile" => $ {
        $ {
            "GLOBALS"
        }
        ["sqkrbxw"]
    }, "productId" => $ {
        $ {
            "GLOBALS"
        }
        ["ujlqmmkcrrcf"]
    }, "uid" => $ {
        $ {
            "GLOBALS"
        }
        ["kypiwykrm"]
    });
    $ {
        $ {
            "GLOBALS"
        }
        ["rrhygnavmwtm"]
    } = json_encode($ {
        $ {
            "GLOBALS"
        }
        ["opyncxcgfxn"]
    });
    $nrjmdcomhag = "result";
    $ {
        "GLOBALS"
    }
    ["ukcdyvfwojp"] = "js";
    $ {
        $ {
            "GLOBALS"
        }
        ["nzuavtj"]
    } = strlen($ {
        $ {
            "GLOBALS"
        }
        ["rrhygnavmwtm"]
    });
    $svrtwpbfk = "ch";
    $ {
        $ {
            "GLOBALS"
        }
        ["oadqqgcth"]
    } = curl_init("https://ai.caping.co.id/v2/product/order/create");
    $jggyvomjq = "ch";
    curl_setopt($ {
        $ {
            "GLOBALS"
        }
        ["oadqqgcth"]
    }, CURLOPT_CUSTOMREQUEST, "POST");
    curl_setopt($ {
        $ {
            "GLOBALS"
        }
        ["oadqqgcth"]
    }, CURLOPT_USERAGENT, "Mozilla/5.0 (Linux; Android 8.1.0; Redmi 4A Build/OPM7.181105.004; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/61.0.3163.98 Mobile Safari/537.36;CapingNews/4.1.5");
    curl_setopt($ {
        $jggyvomjq
    }, CURLOPT_POSTFIELDS, $ {
        $ {
            "GLOBALS"
        }
        ["rrhygnavmwtm"]
    });
    curl_setopt($ {
        $ {
            "GLOBALS"
        }
        ["oadqqgcth"]
    }, CURLOPT_RETURNTRANSFER, true);
    $ {
        "GLOBALS"
    }
    ["fxqvsgpefm"] = "ch";
    curl_setopt($ {
        $ {
            "GLOBALS"
        }
        ["oadqqgcth"]
    }, CURLOPT_HTTPHEADER, array("Cookie: $coki", "Content-Type: application/json", "Content-Length: " . $ {
        $ {
            "GLOBALS"
        }
        ["nfrshmf"]
    }, "NETWORKSTATE: wifi", "User-Agent: Mozilla/5.0 (Linux; Android 8.1.0; Redmi 4A Build/OPM7.181105.004; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/61.0.3163.98 Mobile Safari/537.36;CapingNews/4.1.5"));
    $ {
        $nrjmdcomhag
    } = curl_exec($ {
        $svrtwpbfk
    });
    curl_close($ {
        $ {
            "GLOBALS"
        }
        ["fxqvsgpefm"]
    });
    $ {
        $ {
            "GLOBALS"
        }
        ["ukcdyvfwojp"]
    } = json_decode($ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    }, true);
    $ {
        $ {
            "GLOBALS"
        }
        ["qojfecx"]
    } = $ {
        $ {
            "GLOBALS"
        }
        ["rjhtldx"]
    }
    ["code"];
    $ {
        $ {
            "GLOBALS"
        }
        ["sszbke"]
    } = $ {
        $ {
            "GLOBALS"
        }
        ["rjhtldx"]
    }
    ["message"];
    if ($ {
        $ {
            "GLOBALS"
        }
        ["hqxxkyqp"]
    } != "310") {
        $aywhnjvvrwv = "msg";
        echo $ {
            $ {
                "GLOBALS"
            }
            ["yhzyreyfcqw"]
        } . "[--] " . $ {
            $aywhnjvvrwv
        } . "
";
        exit;
    } else {
        $ {
            "GLOBALS"
        }
        ["tcfvhq"] = "msg";
        $ {
            "GLOBALS"
        }
        ["cupjbory"] = "red";
        echo $ {
            $ {
                "GLOBALS"
            }
            ["cupjbory"]
        } . "[--] " . $ {
            $ {
                "GLOBALS"
            }
            ["tcfvhq"]
        } . "
";
    }
}
function produk($coki) {
    $dwktpfoisa = "curl";
    $ {
        "GLOBALS"
    }
    ["xsuvjyweyo"] = "header";
    $rvgasouyjo = "header";
    $ {
        $ {
            "GLOBALS"
        }
        ["xsuvjyweyo"]
    }
    [] = "Cookie: $coki";
    $ {
        $rvgasouyjo
    }
    [] = "User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; Redmi 3S Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 Mobile Safari/537.36;CapingNews/4.1.4";
    $ {
        "GLOBALS"
    }
    ["sscuygv"] = "result";
    $ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    } = curl_init();
    curl_setopt_array($ {
        $dwktpfoisa
    }, array(CURLOPT_RETURNTRANSFER => true, CURLOPT_URL => "https://ai.caping.co.id/v2/product/new/list?offset=0&limit=2147483647", CURLOPT_TIMEOUT => 30, CURLOPT_HTTPHEADER => $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }, CURLOPT_SSL_VERIFYPEER => 0,));
    $ {
        $ {
            "GLOBALS"
        }
        ["sscuygv"]
    } = curl_exec($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    curl_close($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    return $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    };
}
function loading($load) {
    $ {
        $ {
            "GLOBALS"
        }
        ["hmlhivvljm"]
    } = 0;
    while ($ {
        $ {
            "GLOBALS"
        }
        ["hmlhivvljm"]
    } < $ {
        $ {
            "GLOBALS"
        }
        ["jleumvdx"]
    }) {
        $ {
            $ {
                "GLOBALS"
            }
            ["hmlhivvljm"]
        }
        ++;
        echo "•";
        sleep(1);
    }
}
function open($coki, $d, $lv) {
    $swlhyhfssxlv = "header";
    $qxmirtqx = "result";
    $rvepso = "curl";
    $ {
        $swlhyhfssxlv
    }
    [] = "Referer: http://campaign.caping.co.id/christmas2018/?u=" . substr($ {
        $ {
            "GLOBALS"
        }
        ["vklcgoreblwb"]
    }, 2, 8) . "&c=" . substr($ {
        $ {
            "GLOBALS"
        }
        ["vklcgoreblwb"]
    }, 12) . "&d=" . $ {
        $ {
            "GLOBALS"
        }
        ["cnsmokthc"]
    } . "&type=1";
    $lwriemewin = "lv";
    $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }
    [] = "User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; Redmi 3S Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 Mobile Safari/537.36;CapingNews/4.1.4";
    $ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    } = curl_init();
    curl_setopt_array($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    }, array(CURLOPT_RETURNTRANSFER => true, CURLOPT_URL => "http://ai.caping.co.id/dice/package/open?uid=" . substr($ {
        $ {
            "GLOBALS"
        }
        ["vklcgoreblwb"]
    }, 2, 8) . "&level=" . $ {
        $lwriemewin
    }, CURLOPT_TIMEOUT => 30, CURLOPT_HTTPHEADER => $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }, CURLOPT_SSL_VERIFYPEER => 0,));
    $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    } = curl_exec($ {
        $rvepso
    });
    curl_close($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    return $ {
        $qxmirtqx
    };
}
function buy($coki, $d, $lv) {
    $ {
        "GLOBALS"
    }
    ["cfxftfgfox"] = "d";
    $ {
        "GLOBALS"
    }
    ["fdelxfqfb"] = "coki";
    $zdqqwspnzpv = "curl";
    $ {
        "GLOBALS"
    }
    ["kappskpz"] = "coki";
    $tovpmodu = "header";
    $ytaaojpiyi = "header";
    $ {
        "GLOBALS"
    }
    ["zxzyquxymsmv"] = "lv";
    $ {
        $ytaaojpiyi
    }
    [] = "Referer: http://campaign.caping.co.id/christmas2018/?u=" . substr($ {
        $ {
            "GLOBALS"
        }
        ["fdelxfqfb"]
    }, 2, 8) . "&c=" . substr($ {
        $ {
            "GLOBALS"
        }
        ["kappskpz"]
    }, 13) . "&d=" . $ {
        $ {
            "GLOBALS"
        }
        ["cfxftfgfox"]
    } . "&type=1";
    $ {
        $ {
            "GLOBALS"
        }
        ["rezripqhdwrn"]
    }
    [] = "User-Agent: Mozilla/5.0 (Linux; Android 6.0.1; Redmi 3S Build/MMB29M; wv) AppleWebKit/537.36 (KHTML, like Gecko) Version/4.0 Chrome/66.0.3359.126 Mobile Safari/537.36;CapingNews/4.1.4";
    $ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    } = curl_init();
    $usorilhudgo = "result";
    curl_setopt_array($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    }, array(CURLOPT_RETURNTRANSFER => true, CURLOPT_URL => "http://ai.caping.co.id/dice/buy/package/chance?uid=" . substr($ {
        $ {
            "GLOBALS"
        }
        ["vklcgoreblwb"]
    }, 2, 8) . "&level=" . $ {
        $ {
            "GLOBALS"
        }
        ["zxzyquxymsmv"]
    }, CURLOPT_TIMEOUT => 30, CURLOPT_HTTPHEADER => $ {
        $tovpmodu
    }, CURLOPT_SSL_VERIFYPEER => 0,));
    $ {
        $ {
            "GLOBALS"
        }
        ["rvdkhwwzes"]
    } = curl_exec($ {
        $ {
            "GLOBALS"
        }
        ["sjvtgjsjbx"]
    });
    curl_close($ {
        $zdqqwspnzpv
    });
    return $ {
        $usorilhudgo
    };
}
?>")); ?>